(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.VueScrollProgressBar = {}));
}(this, (function (exports) { 'use strict';

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  var script = {
    name: 'VueScrollProgressBar',
    props: {
      height: {
        type: String,
        default: '.5rem'
      },
      zIndex: {
        type: String,
        default: '50'
      },
      backgroundColor: {
        type: String,
        default: 'linear-gradient(to right, #38C172, #51D88A)'
      },
      containerColor: {
        type: String,
        default: 'transparent'
      },
      barClass: {
        type: Object,
        default: function _default() {}
      },
      containerClass: {
        type: Object,
        default: function _default() {
          return {
            'progress-bar-container--container': true
          };
        }
      }
    },
    data: function data() {
      return {
        width: 0
      };
    },
    mounted: function mounted() {
      window.addEventListener('scroll', this.handleScroll);
      window.dispatchEvent(new Event('scroll'));
    },
    destroyed: function destroyed() {
      window.removeEventListener('scroll', this.handleScroll);
    },
    methods: {
      handleScroll: function handleScroll() {
        var height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        this.width = window.scrollY / height * 100;
        var eventWidth = Math.ceil(this.width);

        if (eventWidth === 0) {
          this.$emit('begin');
        }

        if (eventWidth === 100) {
          this.$emit('complete');
        }
      }
    }
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
      if (typeof shadowMode !== 'boolean') {
          createInjectorSSR = createInjector;
          createInjector = shadowMode;
          shadowMode = false;
      }
      // Vue.extend constructor export interop.
      const options = typeof script === 'function' ? script.options : script;
      // render functions
      if (template && template.render) {
          options.render = template.render;
          options.staticRenderFns = template.staticRenderFns;
          options._compiled = true;
          // functional template
          if (isFunctionalTemplate) {
              options.functional = true;
          }
      }
      // scopedId
      if (scopeId) {
          options._scopeId = scopeId;
      }
      let hook;
      if (moduleIdentifier) {
          // server build
          hook = function (context) {
              // 2.3 injection
              context =
                  context || // cached call
                      (this.$vnode && this.$vnode.ssrContext) || // stateful
                      (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
              // 2.2 with runInNewContext: true
              if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                  context = __VUE_SSR_CONTEXT__;
              }
              // inject component styles
              if (style) {
                  style.call(this, createInjectorSSR(context));
              }
              // register component module identifier for async chunk inference
              if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
              }
          };
          // used by ssr in case component is cached and beforeCreate
          // never gets called
          options._ssrRegister = hook;
      }
      else if (style) {
          hook = shadowMode
              ? function (context) {
                  style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
              }
              : function (context) {
                  style.call(this, createInjector(context));
              };
      }
      if (hook) {
          if (options.functional) {
              // register for functional component in vue file
              const originalRender = options.render;
              options.render = function renderWithStyleInjection(h, context) {
                  hook.call(context);
                  return originalRender(h, context);
              };
          }
          else {
              // inject component registration as beforeCreate hook
              const existing = options.beforeCreate;
              options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
      }
      return script;
  }

  const isOldIE = typeof navigator !== 'undefined' &&
      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
  function createInjector(context) {
      return (id, style) => addStyle(id, style);
  }
  let HEAD;
  const styles = {};
  function addStyle(id, css) {
      const group = isOldIE ? css.media || 'default' : id;
      const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
      if (!style.ids.has(id)) {
          style.ids.add(id);
          let code = css.source;
          if (css.map) {
              // https://developer.chrome.com/devtools/docs/javascript-debugging
              // this makes source maps inside style tags work properly in Chrome
              code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
              // http://stackoverflow.com/a/26603875
              code +=
                  '\n/*# sourceMappingURL=data:application/json;base64,' +
                      btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                      ' */';
          }
          if (!style.element) {
              style.element = document.createElement('style');
              style.element.type = 'text/css';
              if (css.media)
                  style.element.setAttribute('media', css.media);
              if (HEAD === undefined) {
                  HEAD = document.head || document.getElementsByTagName('head')[0];
              }
              HEAD.appendChild(style.element);
          }
          if ('styleSheet' in style.element) {
              style.styles.push(code);
              style.element.styleSheet.cssText = style.styles
                  .filter(Boolean)
                  .join('\n');
          }
          else {
              const index = style.ids.size - 1;
              const textNode = document.createTextNode(code);
              const nodes = style.element.childNodes;
              if (nodes[index])
                  style.element.removeChild(nodes[index]);
              if (nodes.length)
                  style.element.insertBefore(textNode, nodes[index]);
              else
                  style.element.appendChild(textNode);
          }
      }
  }

  /* script */
  const __vue_script__ = script;

  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        class: _vm.containerClass,
        style: {
          background: _vm.containerColor,
          zIndex: _vm.zIndex
        }
      },
      [
        _c("div", {
          class: _vm.barClass,
          style: {
            width: _vm.width + "%",
            height: _vm.height,
            background: _vm.backgroundColor
          }
        })
      ]
    )
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    const __vue_inject_styles__ = function (inject) {
      if (!inject) return
      inject("data-v-2fde3600_0", { source: "\n.progress-bar-container--container[data-v-2fde3600] {\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n", map: {"version":3,"sources":["/Users/guillaumebriday/Sites/vue-scroll-progressbar/src/components/VueScrollProgressBar.vue"],"names":[],"mappings":";AA6FA;EACA,eAAA;EACA,WAAA;EACA,MAAA;EACA,OAAA;AACA","file":"VueScrollProgressBar.vue","sourcesContent":["<template>\n  <div\n    :class=\"containerClass\"\n    :style=\"{\n      background: containerColor,\n      zIndex: zIndex\n    }\"\n  >\n    <div\n      :class=\"barClass\"\n      :style=\"{\n        width: `${width}%`,\n        height: height,\n        background: backgroundColor\n      }\"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'VueScrollProgressBar',\n\n  props: {\n    height: {\n      type: String,\n      default: '.5rem'\n    },\n\n    zIndex: {\n      type: String,\n      default: '50'\n    },\n\n    backgroundColor: {\n      type: String,\n      default: 'linear-gradient(to right, #38C172, #51D88A)'\n    },\n\n    containerColor: {\n      type: String,\n      default: 'transparent'\n    },\n\n    barClass: {\n      type: Object,\n      default: () => {}\n    },\n\n    containerClass: {\n      type: Object,\n      default: () => {\n        return {\n          'progress-bar-container--container': true\n        }\n      }\n    }\n  },\n\n  data () {\n    return {\n      width: 0\n    }\n  },\n\n  mounted () {\n    window.addEventListener('scroll', this.handleScroll)\n    window.dispatchEvent(new Event('scroll'))\n  },\n\n  destroyed () {\n    window.removeEventListener('scroll', this.handleScroll)\n  },\n\n  methods: {\n    handleScroll () {\n      const height = document.documentElement.scrollHeight - document.documentElement.clientHeight\n      this.width = (window.scrollY / height) * 100\n      const eventWidth = Math.ceil(this.width)\n\n      if (eventWidth === 0) {\n        this.$emit('begin')\n      }\n\n      if (eventWidth === 100) {\n        this.$emit('complete')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.progress-bar-container--container {\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n</style>\n"]}, media: undefined });

    };
    /* scoped */
    const __vue_scope_id__ = "data-v-2fde3600";
    /* module identifier */
    const __vue_module_identifier__ = undefined;
    /* functional template */
    const __vue_is_functional_template__ = false;
    /* style inject SSR */

    /* style inject shadow dom */



    var VueScrollProgressBar = normalizeComponent(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      false,
      createInjector,
      undefined,
      undefined
    );

  function install(Vue) {
    Vue.component(VueScrollProgressBar.name, VueScrollProgressBar);
  } // Create module definition for Vue.use()

  var plugin = {
    install: install
  }; // Auto-install when vue is found (eg. in browser via <script> tag)

  var GlobalVue = null;

  if (typeof window !== 'undefined') {
    GlobalVue = window.Vue;
  } else if (typeof global !== 'undefined') {
    GlobalVue = global.Vue;
  }

  if (GlobalVue) {
    GlobalVue.use(plugin);
  } // To allow use as module (npm/webpack/etc.) export component

  exports.VueScrollProgressBar = VueScrollProgressBar;
  exports.default = plugin;
  exports.install = install;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
